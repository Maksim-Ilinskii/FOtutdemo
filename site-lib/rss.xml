<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[ThoughtsTheHorses]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>site-lib/media/favicon.png</url><title>ThoughtsTheHorses</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Wed, 12 Feb 2025 22:37:21 GMT</lastBuildDate><atom:link href="site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 12 Feb 2025 22:37:16 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[Basic Fetch Quest]]></title><description><![CDATA[
Go to Object Window -&gt; Character -&gt; click on Quest -&gt; Right Click - New <img alt="Basic Fetch Quest-1677757065014.jpeg" src="attachments/image/basic-fetch-quest-1677757065014.jpeg" target="_self">In the open window - Quest Data tab:
Give ID
Give the Quest Name
Type: Side Quests Give a Priority 50
Remove Start Game Enabled
Quest Completion XP - XPMiscQuestLowLvlSmaller
<br><img alt="Basic Fetch Quest-1677757600637.jpeg" src="attachments/image/basic-fetch-quest-1677757600637.jpeg" target="_self">In Quest Stages tab:
Set up the stages
Stage 10 Papyrus Fragment:
1SetObjectiveDisplayed(10)Stage 20:1SetObjectiveCompleted(10)2SetObjectiveDisplayed(20)<br>Stage 30:
First you need to set everything up. Follow the tutorial, then check out <a data-tooltip-position="top" aria-label="Basic Fetch Quest > Method 2" data-href="Basic Fetch Quest#Method 2" href="basic-fetch-quest.html#Method_2_0" class="internal-link" target="_self" rel="noopener nofollow">Method 2 down below</a> to get the script for Stage 30.You need to have a reference to an object. Right-click → New Reference Alias<br><img alt="Basic Fetch Quest-1677759608216.jpeg" src="attachments/image/basic-fetch-quest-1677759608216.jpeg" target="_self">In the open Reference Alias window:
Give Alias a name Click Specific Reference → Select Forced Reference
<br><img alt="Basic Fetch Quest-1677759893121.jpeg" src="attachments/image/basic-fetch-quest-1677759893121.jpeg" target="_self">In the open window, Select Reference in Render Window<br><img alt="Basic Fetch Quest-1677759941079.jpeg" src="attachments/image/basic-fetch-quest-1677759941079.jpeg" target="_self">There, you click on the object in the world.In this tab, you need to reference an objective stage to your alias, so to say:
Right-click on Target Ref → New → Select your alias FirstObjective (Usually it will default to the first alias it finds by itself)
In the game, it will show the quest marker to the object the player needs to go to.
To add a trigger box, go to Object Windows and find DefaultSetStageTriggerPlayerOnly and drag it into the world
Put it where you want and press 2 to scale it
Then double-click it and go to Scripts tab
Double-click on defaultrefontriggerenter
<br><img alt="Basic Fetch Quest-1677690144453.jpeg" src="attachments/image/basic-fetch-quest-1677690144453.jpeg" target="_self">
We deleted the second trigger box from the first tutorial. Then we go to our quest file → Quest Aliases and open FirstObjective in the list of Alias Names.
<br><img alt="Basic Fetch Quest-1677678156830.jpeg" src="attachments/image/basic-fetch-quest-1677678156830.jpeg" target="_self">
Then check that everything is ok:
<br><img alt="Basic Fetch Quest-1677678219185.jpeg" src="attachments/image/basic-fetch-quest-1677678219185.jpeg" target="_self">Sometimes you might get unknown things here. It's pretty rare generally and usually it solves itself when you hit "Yes" to that. But it's best to make sure.When you get those warnings, read them through, take them seriously, and consider what you're about to delete so you won't have any problems.
For this tutorial, we're going to select a rare blow torch and put it on the ground.
<br><img alt="Basic Fetch Quest-1677678488657.jpeg" src="attachments/image/basic-fetch-quest-1677678488657.jpeg" target="_self">
Now you should create an activator. You can either select a HotelBell object:
<br><img alt="Basic Fetch Quest-1677678665908.jpeg" src="attachments/image/basic-fetch-quest-1677678665908.jpeg" target="_self"><br>Note
I made a custom activator from static object by following <a data-tooltip-position="top" aria-label="Creation Kit make static objects look like activators" data-href="Creation Kit make static objects look like activators" href="games/fallout-4/fallout-4-modding/creation-kit-make-static-objects-look-like-activators.html" class="internal-link" target="_self" rel="noopener nofollow">this</a> tutorial. I made it a phone.
Note
In the example bellow, the Bell's ID is called kgQuest_TurnInBell. Further in this tutorial, you'll see the name mxpQuest_TurnInBell.
<br><img alt="Basic Fetch Quest-1677679041070.jpeg" src="attachments/image/basic-fetch-quest-1677679041070.jpeg" target="_self">OR,you can select the phone with the activator you've made previously on the workbench:<br><img alt="Basic Fetch Quest-1677679202384.jpeg" src="attachments/image/basic-fetch-quest-1677679202384.jpeg" target="_self">A few notes first:Note
Use Designer Notes field as a reminder what Player does on a certain stage of the quest. To create a stage, find your quest if you already created it and double click it. Then, right-click on the left field → New
<br><img alt="Basic Fetch Quest-1677679740484.jpeg" src="attachments/image/basic-fetch-quest-1677679740484.jpeg" target="_self">
Put the number of the stage
<br><img alt="Basic Fetch Quest-1677679877210.jpeg" src="attachments/image/basic-fetch-quest-1677679877210.jpeg" target="_self">
Everything will be greyed out. We need to create a new log entry:
<br><img alt="Basic Fetch Quest-1677680003737.jpeg" src="attachments/image/basic-fetch-quest-1677680003737.jpeg" target="_self">
Then I put a Designer Note: Player rang the phone. In log entry you can enter what will be in Pip Boy's log.
<br><img alt="Basic Fetch Quest-1677680323941.jpeg" src="attachments/image/basic-fetch-quest-1677680323941.jpeg" target="_self">Now that we schemed the flow of the quests, we need to arrange so that quest know about these things. So these stages can actually be reached.
Now we go to our blowtorch
We go to Gameplay → Papyrus Manager and search for the script defaultrefoncontainerchangedto and drag it to the objects Scripts tab
<br><img alt="cropped_Set stage upon looting an object-1677675243411.svg" src="attachments/cropped_set-stage-upon-looting-an-object-1677675243411.svg" target="_self" style="width: 900px; max-width: 100%;">Note
The idea with containers is that any NPC or the player is a container as well. So they pick up an item, it goes into their inventory (=container). When item is out in the world it's not in the container, so we want to know it moved into container (defaultrefoncontainerchangedto). So we're monitoring for when this changes to a container. Generally NPCs don't pick up random items. The items don't put into containers automatically, and we can actually set this up so that the only Player can do it, but generally we don't need to worry about it. Then, double-click defaultrefoncontainerchangedto)
Double click MyQuest in the opened window
On the right of the window, on PickObject select your quest:
<br><img alt="Set stage upon looting an object-1677677183076.jpeg" src="attachments/image/set-stage-upon-looting-an-object-1677677183076.jpeg" target="_self">
Click StageToSet and enter value of the stage this item should be connected to.
<br><img alt="Set stage upon looting an object-1677677384942.jpeg" src="attachments/image/set-stage-upon-looting-an-object-1677677384942.jpeg" target="_self">
A player can run into say, second stage of the quest too early and trigger it. Then we use PrereqStage and put the stage the player should trigger before the second stage can be triggered.
<br><img alt="Set stage upon looting an object-1677677685035.jpeg" src="attachments/image/set-stage-upon-looting-an-object-1677677685035.jpeg" target="_self">
We can also make sure that only the player can pick it up
<br><img alt="Basic Fetch Quest-1677680947190.jpeg" src="attachments/image/basic-fetch-quest-1677680947190.jpeg" target="_self">TurnOffStage means if it reaches that stage in your quest, then it should no longer do these things. So if something else happened first… It can be an interesting way to prevent quests that you don't want to fire later. For example, you had an NPC that you had to turn into this item, and they died, then maybe you don't want picking up the torch and triggering the quest. Because that NPC is dead, and you couldn't turn it into them anyway. The document String says:
If the quest stage is equal or greater than TurnOffStage, further events are ignored
Note
This stage does not actually have to be set—any quest stage equal or higher will turn off this script. ItemChangedTo — his is the way to set up which container it went to. So you could do things like monitoring for a player putting an item into particular container-- maybe you want to only respond to them-- you want to tell them to put it in the workbench, and then you could set up this ItemChangedToReferences to point to all bunch of different workshops or something like that.
Or tell them to put it into a very specific locker somewhere that you set up in the world.Now we want the stage 30 to happen when the Player clicks on the bell/phone. We double-click it → Go to Scripts Tab → Add and search for defaultrefonactivate<br><img alt="Basic Fetch Quest-1677682653020.jpeg" src="attachments/image/basic-fetch-quest-1677682653020.jpeg" target="_self">In the open window we set up:
MyQuest - our quest again StageToSet to 30.
We also set PreReq stage to 20 (i.e. prev stage)
<br><img alt="Basic Fetch Quest-1677682963978.jpeg" src="attachments/image/basic-fetch-quest-1677682963978.jpeg" target="_self">Warning
Any time you go to the Objectives tab, make sure you press Ok on your forms and save. Because it tends to crash. Open Quest Objectives In display Text enter what you want to display to the player. Say: Find the Rare Torch
<br><img alt="Basic Fetch Quest-1677683528041.jpeg" height="409" src="attachments/image/basic-fetch-quest-1677683528041.jpeg" target="_self" style="width: 700px; max-width: 100%;">Then add the second Objective: Ring the bell/phone<br><img alt="Basic Fetch Quest-1677683626643.jpeg" src="attachments/image/basic-fetch-quest-1677683626643.jpeg" target="_self"><br><img alt="Basic Fetch Quest-1677683666058.jpeg" src="attachments/image/basic-fetch-quest-1677683666058.jpeg" target="_self"> Then we get back to Blowtorch Quest Window -&gt; Quest Aliases -&gt; FirstObjective (or whatever you called the alias) Select Forced Reference Select Reference in Render Window <br>
Click on Blowtorch right in the world (render windows)
<img alt="Basic Fetch Quest-1677684379253.jpeg" src="attachments/image/basic-fetch-quest-1677684379253.jpeg" target="_self"> The window will pop up: <br><img alt="Basic Fetch Quest-1677684482926.jpeg" src="attachments/image/basic-fetch-quest-1677684482926.jpeg" target="_self">If you're working out in the overworld, you're pretty much always say "No"; if you're making a custom interior cell or custom worldspace you could say "Yes". It is more performant to use ref types. It's then these items don't have to remain in memory for as long. But when you're using Bethesda stuff or even if you're at modding another mod, it's best not to do that because you risk introducing incompatible edits to that mod.
The last thing you have to do, is to flag Quest Object in Reference Alias window. It prevents player from selling or dropping the object.
<br><img alt="Basic Fetch Quest-1677684871460.jpeg" src="attachments/image/basic-fetch-quest-1677684871460.jpeg" target="_self">
(possible) Alternative way to make it a quest object: Double-click an object (Blowtorch, in our case)
Edit the Base
<br>Right-click on the Keyword field -&gt; Add
<img alt="Basic Fetch Quest-1677686391197.jpeg" src="attachments/image/basic-fetch-quest-1677686391197.jpeg" target="_self">
Search for NotJunkJetAmmo You can rename your Object and change its ID: <br><img alt="Basic Fetch Quest-1677686746714.jpeg" src="attachments/image/basic-fetch-quest-1677686746714.jpeg" target="_self">In the pop-up window, click "Yes":<br><img alt="Basic Fetch Quest-1677686819330.jpeg" src="attachments/image/basic-fetch-quest-1677686819330.jpeg" target="_self">Now we want our bell/phone to be the same.
Open your quest file -&gt; Quest Alias tab
Right click - &gt; New Reference Alias
<br><img alt="Basic Fetch Quest-1677687229953.jpeg" src="attachments/image/basic-fetch-quest-1677687229953.jpeg" target="_self">In the open window:
Give Alias Name
Click Specific Reference Select Forced Reference
<br><img alt="Basic Fetch Quest-1677687403906.jpeg" src="attachments/image/basic-fetch-quest-1677687403906.jpeg" target="_self">
In the open window: Select Reference in Render Window
In Render Window, double-click on the phone/bell
<br><img alt="Basic Fetch Quest-1677687561306.jpeg" src="attachments/image/basic-fetch-quest-1677687561306.jpeg" target="_self">
Click ok. The warning window will pop up. Click "No":<br><img alt="Basic Fetch Quest-1677687640903.jpeg" src="attachments/image/basic-fetch-quest-1677687640903.jpeg" target="_self">Then, click "Ok" in all the windows and save!Next steps:
Open Quest file → Quest Objectives tab
Select the last stage (Ring The Phone/bell)
Right-click on the Target Ref area → New <br><img alt="Basic Fetch Quest-1677692873432.jpeg" src="attachments/image/basic-fetch-quest-1677692873432.jpeg" target="_self">
Select target Alias <br><img alt="Basic Fetch Quest-1677692940134.jpeg" src="attachments/image/basic-fetch-quest-1677692940134.jpeg" target="_self"><br><img alt="cropped_Basic Fetch Quest-1677692940134.svg" src="attachments/cropped_basic-fetch-quest-1677692940134.svg" target="_self">Now you've got the ability to display your two objects as quest objectives to the player.Now you need to put the script to show the objectives to the player:
Go to Quest Stages and select the first objective. Find the Papyrus Fragment section and enter SetObjectiveDisplayed(10) — where 10 being a number of the stage index. <br>
Then, click Compile
<img alt="Basic Fetch Quest-1677693320255.jpeg" src="attachments/image/basic-fetch-quest-1677693320255.jpeg" target="_self"> On Stage 2, in Papyrus Fragment enter 1SetObjectiveCompleted(10)2SetObjectiveDisplayed(20)
On stage 3 enter: 1SetObjectiveCompleted(20)Note
Alternatively, you can use this code:
1CompleteAllObjectives()
This one is useful when you have optional objectives or when you forgot to mark completed one of the stages.
There are two ways, and the second one is most recommended, because it's safer.<br><a data-href="Note about Papyrus Fragments" href="games/fallout-4/fallout-4-modding/note-about-papyrus-fragments.html" class="internal-link" target="_self" rel="noopener nofollow">Note about Papyrus Fragments</a>You can add the property of your item and just tell the game to remove that from the player's inventory.To do that, click on Properties:<br><img alt="Basic Fetch Quest-1677745316252.jpeg" src="attachments/image/basic-fetch-quest-1677745316252.jpeg" target="_self">Click Add Property (Marked red in the screenshot bellow). A window Add Script Property will appear:<br><img alt="cropped_Basic Fetch Quest-1677745384914.svg" src="attachments/cropped_basic-fetch-quest-1677745384914.svg" target="_self">You'll need to choose the type of the properties.Unfortunately, this is a weird type that has a different name in the script than it has in the game. This is one of a few that does this, the rest are pretty straight forward.Generally, you look at the type of the category of the item that you selected.So, in the Object Window, it is called MiscItem:<br><img alt="Basic Fetch Quest-1677745649464.jpeg" src="attachments/image/basic-fetch-quest-1677745649464.jpeg" target="_self">However, in add script property it is called MiscObject. This is an odd mix up only Bethesda knows where it comes from.<br><img alt="Basic Fetch Quest-1677745715710.jpeg" src="attachments/image/basic-fetch-quest-1677745715710.jpeg" target="_self">Now we can give it a Name "Blow Torch", but there's a better way.If we copy the exact name of our object,it will automatically fill in the property.<br><img alt="Basic Fetch Quest-1677749263259.jpeg" src="attachments/image/basic-fetch-quest-1677749263259.jpeg" target="_self"><br><img alt="Basic Fetch Quest-1677749363678.jpeg" src="attachments/image/basic-fetch-quest-1677749363678.jpeg" target="_self">In the next window, you'll see a little pencil like it's edited. If we click on it, it'll automatically select our item. So it's a nice little handy shortcut.<br><img alt="Basic Fetch Quest-1677748609719.jpeg" src="attachments/image/basic-fetch-quest-1677748609719.jpeg" target="_self">Now this script can reference this particular type of item. Now we're going to fiddle with papyrus a bit.1CompleteAllObjectives()23Game.GetPlayer()RemoveItem(mxpBlowtorch_Rare)By Game.GetPlayer(), you get access to the player, you can call different functions on them, etc.Keep in mind! You can't just put the name of an item (mpxBlowtorch_Rare in our case) into RemoveItem(mxpBlowtorch_Rare) unless it's a property! So what you are typing in is the property name. Because we used the same name for the property, it does look like we're typing in just the name, but in reality we don't. Don't get confused! Set up the property properly first.
Also, there's a little trick.
If you put a comma and -1, that tells it to remove ALL of the item that the player has. 1CompleteAllObjectives()23Game.GetPlayer()RemoveItem(mxpBlowtorch_Rare, -1)
Alternatively, -1 can be the number you want to remove. One common thing people use it is to remove caps from the player, make them buy things — you could do remove item.
There's a property for caps it's a misc item called caps001, and then you put the number of caps you want to remove from them.
Conclusion:So this method would typically work. This would get rid of the item from the inventory, because we know this is the only one we placed, and this is the only that the player can have.The problem with this method is that often you'll be using things that aren't rare unique quest items. It could be that maybe you wanted the player to get a hunting rifle. We don't want to just remove any hunting rifle, we want specifically the one that is a quest item in our alias because that's the one they can't get rid of.It's considered a bad move most of the time. A better way to do it is to instead grab the item from the alias itself. (Go to Method #2)Note
to comment out the code in Papyrus, put semicolon in front of the line
1CompleteAllObjectives()23;Game.GetPlayer()RemoveItem(mxpBlowtorch_Rare, -1)So we need the property to point to alias.Let's go to Quest Aliases and rename FirstObjective to Blowtorch. Double-click on FirstObjective and in the open window, rename it and hit "Ok".<br><img alt="Basic Fetch Quest-1677751105115.jpeg" src="attachments/image/basic-fetch-quest-1677751105115.jpeg" target="_self"><br><img alt="Basic Fetch Quest-1677751064915.jpeg" src="attachments/image/basic-fetch-quest-1677751064915.jpeg" target="_self">
Go back to Quest Stages -&gt; Select the last objectives
click Properties in Papyrus Fragment
In the open window, click Add Property
<br><img alt="Basic Fetch Quest-1677745384914.jpeg" src="attachments/image/basic-fetch-quest-1677745384914.jpeg" target="_self">This time we're going to use the Type: Reference Alias and the Name: BlowtorchAlias.<br><img alt="Basic Fetch Quest-1677751736719.jpeg" src="attachments/image/basic-fetch-quest-1677751736719.jpeg" target="_self">Note
There's a trick in the latter one: if you use the name of the actual alias, and you add the word "Alias" after, it will automatically fill. <br><img alt="Basic Fetch Quest-1677751751300.jpeg" src="attachments/image/basic-fetch-quest-1677751751300.jpeg" target="_self">Click Pick Alias and choose it:<br><img alt="Basic Fetch Quest-1677751859416.jpeg" src="attachments/image/basic-fetch-quest-1677751859416.jpeg" target="_self">So now we get back to the last stage's Papyrus Fragment and type in: 1CompleteAllObjectives()23Game.GetPlayer().RemoveItem(BlowtorchAlias.GetRef())Just for the sake of comparison with the first method, I'll leave it here:1CompleteAllObjectives()23;Game.GetPlayer().RemoveItem(mxpBlowtorch_Rare, -1) — instead of this you put this:45Game.GetPlayer().RemoveItem(BlowtorchAlias.GetRef(), -1)Alias is just an invisible box that holds something in it. So to get the thing in the box, we do .GetRef(). And we don't need to use -1 because there's only one item. By default, if you don't put the second property after comma , , it'll just emove one item.That's it!]]></description><link>basic-fetch-quest.html</link><guid isPermaLink="false">Games/Fallout 4/Fallout 4 Modding/Basic Fetch Quest.md</guid><dc:creator><![CDATA[Maksim Ilinskii]]></dc:creator><pubDate>Wed, 12 Feb 2025 22:35:14 GMT</pubDate><enclosure url="attachments/image/basic-fetch-quest-1677757065014.jpeg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;attachments/image/basic-fetch-quest-1677757065014.jpeg&quot;&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>